import \'package:flutter_test/flutter_test.dart\';\nimport \'package:ludo_club/models/game_state.dart\';\nimport \'package:ludo_club/models/player.dart\';\nimport \'package:ludo_club/services/game_service.dart\';\n\n// Helper function to create a game state for testing moves\nGameState createStateForMoveTest(PlayerColor playerColor, List<int> piecePositions) {\n  final players = PlayerColor.values.map((color) {\n    List<Piece> pieces;\n    if (color == playerColor) {\n      pieces = piecePositions.map((pos) => Piece(id: piecePositions.indexOf(pos), position: pos, color: playerColor)).toList();\n    } else {\n      // Assign default out-of-board positions for other players for simplicity\n      pieces = List.generate(4, (i) => Piece(id: i, position: -1, color: color));\n    }\n    return Player(color, \'Player \${color.toString().split(\'.\').last}\', pieces: pieces);\n  }).toList();\n\n  return GameState(\n    players: players,\n    currentPlayerIndex: players.indexWhere((p) => p.color == playerColor),\n    diceRoll: 0, // Assuming dice roll is not directly part of this specific state creation\n    isGameOver: false,\n    winner: \'\',\n    rolledSix: false,\n  );\n}\n\nvoid main() {\n  late GameService gameService;\n\n  setUp(() {\n    gameService = GameService();\n  });\n\n  group(\'GameService Tests\', () {\n    test(\'Initial game state is correct\', () {\n      final initialPlayerTypes = [PlayerType.human, PlayerType.computer, PlayerType.human, PlayerType.computer];\n      gameService.startNewGame(initialPlayerTypes);\n      final gameState = gameService.state;\n\n      expect(gameState.players.length, 4);\n      expect(gameState.players.every((player) => player.pieces.every((piece) => piece.position == -1)), isTrue);\n      expect(gameState.currentPlayerIndex, 0);\n      expect(gameState.isGameOver, isFalse);\n    });\n\n    test(\'Roll dice updates diceRoll in GameState\', () {\n      final initialPlayerTypes = [PlayerType.human, PlayerType.human, PlayerType.human, PlayerType.human];\n      gameService.startNewGame(initialPlayerTypes);\n      gameService.rollDice();\n      final gameState = gameService.state;\n      expect(gameState.diceRoll, greaterThan(0));\n      expect(gameState.diceRoll, lessThan(7));\n    });\n\n    // Example for prefer_const_declarations fix\n    test(\'createStateForMoveTest creates correct state\', () {\n      const playerColor = PlayerColor.red;\n      const piecePositions = [-1, 0, 15, 56]; // Example positions\n      final GameState gameState = createStateForMoveTest(playerColor, piecePositions);\n\n      expect(gameState.players.firstWhere((p) => p.color == playerColor).pieces.map((p) => p.position).toList(), piecePositions);\n    });\n    \n    // Add more tests for other GameService methods like movePiece, switchPlayer, etc.\n    // For example, testing movePiece:\n    test(\'movePiece updates piece position correctly\', () {\n      final initialPlayerTypes = [PlayerType.human];\n      gameService.startNewGame(initialPlayerTypes);\n      gameService.state.players[0].pieces[0].position = 0; // Place a piece on the board\n      gameService.state.diceRoll = 3; // Simulate a dice roll of 3\n\n      final success = gameService.movePiece(gameService.state.players[0].pieces[0]);\n      expect(success, isTrue);\n      expect(gameService.state.players[0].pieces[0].position, 3);\n    });\n\n    test(\'game ends when a player gets all pieces home\', () {\n      gameService.startNewGame([PlayerType.human]);\n      // Simulate player getting all pieces home\n      for (var piece in gameService.state.players[0].pieces) {\n        piece.position = 56; // Assuming 56 is the home position\n      }\n      // Manually trigger check for game over, or ensure movePiece does it\n      gameService.movePiece(gameService.state.players[0].pieces[0]); // A move to trigger checks\n      expect(gameService.state.isGameOver, isTrue);\n      expect(gameService.state.winner, gameService.state.players[0].name);\n    });\n\n  });\n}\n 